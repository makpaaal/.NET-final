// <auto-generated />
using final.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace final.Migrations
{
    [DbContext(typeof(DateContext))]
    [Migration("20180511015108_mainMigration")]
    partial class mainMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("final.Models.Category", b =>
                {
                    b.Property<int>("Category_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category_name");

                    b.HasKey("Category_id");

                    b.ToTable("CategoryTable");
                });

            modelBuilder.Entity("final.Models.Customer", b =>
                {
                    b.Property<int>("Customer_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Customer_name");

                    b.HasKey("Customer_id");

                    b.ToTable("CustomerTable");
                });

            modelBuilder.Entity("final.Models.Detail", b =>
                {
                    b.Property<int>("Detail_id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Master_id");

                    b.Property<int>("Price");

                    b.Property<DateTime>("dateOfFlight");

                    b.HasKey("Detail_id");

                    b.HasIndex("Master_id");

                    b.ToTable("DetailTable");
                });

            modelBuilder.Entity("final.Models.Master", b =>
                {
                    b.Property<int>("Master_id");

                    b.Property<int?>("Customer_id");

                    b.Property<int?>("Detail_id");

                    b.HasKey("Master_id");

                    b.HasIndex("Customer_id");

                    b.HasIndex("Detail_id")
                        .IsUnique()
                        .HasFilter("[Detail_id] IS NOT NULL");

                    b.ToTable("MasterTable");
                });

            modelBuilder.Entity("final.Models.Product", b =>
                {
                    b.Property<int>("Product_id");

                    b.Property<int?>("Category_id");

                    b.Property<string>("fromPoint");

                    b.Property<int>("seatNumber");

                    b.Property<string>("toPoint");

                    b.HasKey("Product_id");

                    b.HasIndex("Category_id");

                    b.ToTable("ProductTable");
                });

            modelBuilder.Entity("final.Models.Detail", b =>
                {
                    b.HasOne("final.Models.Master", "Master")
                        .WithMany()
                        .HasForeignKey("Master_id");
                });

            modelBuilder.Entity("final.Models.Master", b =>
                {
                    b.HasOne("final.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("Customer_id");

                    b.HasOne("final.Models.Detail", "Detail")
                        .WithOne()
                        .HasForeignKey("final.Models.Master", "Detail_id");

                    b.HasOne("final.Models.Customer")
                        .WithMany("Masters")
                        .HasForeignKey("Master_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("final.Models.Product", b =>
                {
                    b.HasOne("final.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Category_id");

                    b.HasOne("final.Models.Category")
                        .WithMany("Products")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("final.Models.Detail")
                        .WithMany("Products")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
